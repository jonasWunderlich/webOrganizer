{"version":3,"sources":["../../../scripts.babel/app/services/storage.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;AASb,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CACrB,OAAO,CAAC,SAAS,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE;;;;;;;;;AASvE,MAAI,iBAAiB,GAAG,SAApB,iBAAiB,GAAc;AACjC,QAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;AAC1B,aAAS,CAAC,YAAY,EAAE,CACrB,IAAI,CAAC,UAAS,SAAS,EAAE;AACxB,eAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAS,cAAc,EAAE;AACjE,YAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;;AAEpC,2BAAmB,CAAC,SAAS,CAAC,CAAC;AAC/B,gBAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;OAClC,EAAE,UAAS,KAAK,EAAE;AACjB,YAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;AAC3C,2BAAmB,CAAC,SAAS,CAAC,CAAC;OAChC,CACF,CAAC;KACL,CAAC,CAAC;AACH,WAAO,QAAQ,CAAC,OAAO,CAAC;GACzB,CAAC;;;;;;;;;AAUF,MAAI,mBAAmB,GAAG,SAAtB,mBAAmB,CAAY,SAAS,EAAE;;AAE5C,QAAI,eAAe,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;;AAErD,UAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC,gBAAgB,EAAE,eAAe,EAAC,EAAE,YAAW,EAAE,CAAC,CAAC;GAC9E,CAAC;;;;;;;;;;AAUF,MAAI,mBAAmB,GAAG,SAAtB,mBAAmB,CAAY,IAAI,EAAE;AACvC,QAAI,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAChD,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,KAAC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAS,IAAI,EAAE;AACpC,UAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,mBAAmB,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AAC7E,WAAK,CAAC,KAAK,GAAG,WAAW,EAAE,CAAC;AAC5B,YAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;;AAExB,OAAC,CAAC,KAAK,CAAC,MAAM,EAAE,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;KACpD,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;GACf,CAAC;;AAGF,SAAO;AACL,wBAAoB,EAAE,SAAS,CAAC,oBAAoB;AACpD,cAAU,EAAE,SAAS,CAAC,UAAU;AAChC,0BAAsB,EAAE,SAAS,CAAC,sBAAsB;AACxD,qBAAiB,EAAE,iBAAiB;GACrC,CAAC;CAEH,CAAC,CAAC","file":"storage.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc service\n * @name newTab.Storage\n * @description\n * Service for getting the Browser Storage\n */\n\nangular.module('newTab')\n  .service('Storage', function ($log, $http, $q, configuration, ChromeApi) {\n\n    /**\n     * @ngdoc method\n     * @name getStoredContexts\n     * @methodOf newTab.Storage\n     * @description Checks if Context-Configuration already exists in the Storage - If not creates it\n     * @returns {promise}\n     */\n    var getStoredContexts = function() {\n      var deferred = $q.defer();\n      ChromeApi.getBookmarks()\n        .then(function(bookmarks) {\n          ChromeApi.getStorage('contextOptions').then(function(contextOptions) {\n              $log.debug('Context Options found');\n              //TODO: For now Options are rewritten with every reload for Setting up the correct settings\n              writeContextOptions(bookmarks);\n              deferred.resolve(contextOptions);\n            }, function(error) {\n              $log.debug('Building New Context Options');\n              writeContextOptions(bookmarks);\n            }\n          );\n      });\n      return deferred.promise;\n    };\n\n\n    /**\n     * @ngdoc method\n     * @name writeContextOptions\n     * @methodOf newTab.Storage\n     * @description\n     * @param bookmarks\n     */\n    var writeContextOptions = function(bookmarks) {\n      //TODO: Maybe this can be put into the getStoredContext-method later\n      var _contextOptions = setupContextOptions(bookmarks);\n      //TODO: This needs to be put as a function to the ChromeApi that returns a promise\n      chrome.storage.local.set({'contextOptions': _contextOptions}, function() {});\n    };\n\n    /**\n     * @ngdoc method\n     * @name setupContextOptions\n     * @methodOf newTab.Storage\n     * @description Recursive Function for writing Context Configuration Data in the Storage\n     * @param data\n     * @returns {{}}\n     */\n    var setupContextOptions = function(data) {\n      var bookmarkFolder = _.filter(data, 'children');\n      var result = {};\n      _.each(bookmarkFolder, function(item) {\n        var entry = _.omit(item, 'id', 'dateGroupModified', 'dateAdded', 'children');\n        entry.color = randomColor();\n        result[item.id] = entry;\n        // TODO: Maybe its better to filter empty objects before the recursion\n        _.merge(result, setupContextOptions(item.children))\n      });\n      return result;\n    };\n\n\n    return {\n      getStorageBytesInUse: ChromeApi.getStorageBytesInUse,\n      getStorage: ChromeApi.getStorage,\n      getStoredConfiguration: ChromeApi.getStoredConfiguration,\n      getStoredContexts: getStoredContexts\n    };\n\n  });\n"]}