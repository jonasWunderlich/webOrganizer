{"version":3,"sources":["../../../scripts.babel/app/services/chromeApi.js"],"names":[],"mappings":"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","file":"chromeApi.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc service\n * @name newTab.ChromeApi\n * @description get\n * Service for communication with the Browser-API\n */\n\nangular.module('newTab')\n  .service('ChromeApi', function ($log, $http, $q, configuration) {\n\n    /**\n     * @ngdoc method\n     * @name getBookmarks\n     * @methodOf newTab.ChromeApi\n     * @description get all Browser-Bookmarks in its Tree-Structure\n     * @returns {promise}\n     */\n    var getBookmarks = function() {\n      var deferred = $q.defer();\n      chrome.bookmarks.getTree(function(response) {\n        if (response) {\n          $log.debug('Bookmark-Tree data retrieved:', response[0].children[0].children);\n          deferred.resolve(response[0].children[0].children)\n        } else {\n          $log.debug('Unable to retrieve Bookmark-Tree data', response);\n          deferred.reject('unable to retrieve Bookmark-Tree data')\n        }\n      });\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getOpenTabs\n     * @methodOf newTab.ChromeApi\n     * @description get active Tabs ether of a specific Window all by setting no ID all Tabs\n     * @param windowId\n     * @returns {promise}\n     */\n    var getOpenTabs = function(windowId) {\n      var deferred = $q.defer();\n      var _config = {};\n      chrome.tabs.query(_config, function(response) {\n        if(response) {\n          var _activeWindow = 'all';\n          if(windowId !== undefined) {\n            _activeWindow = windowId;\n          }\n          $log.debug('opened Tabs in '+_activeWindow+' retrieved:', response);\n          deferred.resolve(response);\n        } else {\n          $log.debug('Unable to retrieve opened Tabs', response);\n          deferred.reject('Unable to retrieve opened Tabs');\n        }\n      });\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getHistory\n     * @methodOf newTab.ChromeApi\n     * @description get History with the set Configuration\n     * @returns {promise}\n     */\n    var getHistory = function() {\n      var deferred = $q.defer();\n      var config = configuration.getHistoryConfiguration();\n      chrome.history.search(config, function(response) {\n        if(response) {\n          $log.debug('getHistory data retrieved:');\n          deferred.resolve(response)\n        } else {\n          $log.debug('Unable to retrive getHistory', response);\n          deferred.reject('Unable to retrieve History');\n        }\n      });\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getVisits\n     * @methodOf newTab.ChromeApi\n     * @description get Visits for a specific Page - The Depth of retrievable Visits can be configured\n     * @param page\n     * @returns {promise}\n     */\n    var getVisits = function(page) {\n      var deferred = $q.defer();\n      var _config = {'url': page.url };\n      chrome.history.getVisits(_config, function(response) {\n        if(response) {\n          // $log.debug('getVisits data retrieved:', response);\n          deferred.resolve(response);\n        } else {\n          $log.debug('Unable to retrieve getVisits', response);\n          deferred.reject('Unable to retrieve getVisits');\n        }\n      });\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getStorage\n     * @methodOf newTab.ChromeApi\n     * @description get Data of Storage - If no variable is set get complete Storage is return - else it is tried to get the specific storage-data\n     * @param variable\n     * @returns {promise}\n     */\n    var getStorage = function(variable) {\n      var deferred = $q.defer();\n      chrome.storage.local.get(variable, function(response) {\n        if (response) {\n          if(variable !== undefined) {\n            if (response[variable] !== undefined) {\n              var _storageData = response[variable];\n              $log.debug('Storage data for '+variable+' retrieved:');\n              deferred.resolve(_storageData);\n            } else {\n              $log.debug('Storage variable '+variable+' is not set');\n              deferred.reject('unable to retrieve Storage data');\n            }\n          }\n          else {\n            $log.debug('Complete Storage Data retrieved');\n            deferred.resolve(response);\n          }\n        } else {\n          $log.debug('Unable to retrieve Storage data', response);\n          deferred.reject('unable to retrieve Storage data');\n        }\n      });\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getStoredConfiguration\n     * @methodOf newTab.ChromeApi\n     * @description get Explicitly the Configuration-Data from the Local Storage\n     * @returns {promise}\n     */\n    var getStoredConfiguration = function() {\n      var deferred = $q.defer();\n      getStorage('configuration')\n        .then(function(response) {\n          if(response) {\n            $log.debug('stored Configuration found', response);\n            return response;\n          } else {\n            $log.debug('no stored Configuration found trying to build');\n            var configObject = {\n              'version': 0.01\n            };\n            //TODO: Put this in an extra Function that returns a promise\n            chrome.storage.local.set({'configuration':configObject}, function(response) {});\n          }\n        });\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getStorageBytesInUse\n     * @methodOf newTab.ChromeApi\n     * @description get Bytes so far used in the storage (5MB locally available)\n     * @returns {promise}\n     */\n    var getStorageBytesInUse = function() {\n      var deferred = $q.defer();\n      chrome.storage.local.getBytesInUse(function(response) {\n        if (response) {\n          $log.debug('Storage Bytes retrieved:', response);\n          deferred.resolve(response);\n        } else {\n          $log.debug('Unable to get Storage Usage', response);\n          deferred.reject('Unable to get Storage Usage');\n        }\n      });\n      return deferred.promise;\n    };\n\n    return {\n      getBookmarks: getBookmarks,\n      getOpenTabs: getOpenTabs,\n      getHistory: getHistory,\n      getVisits: getVisits,\n      getStorageBytesInUse: getStorageBytesInUse,\n      getStorage: getStorage,\n      getStoredConfiguration: getStoredConfiguration\n    };\n\n  });\n"]}