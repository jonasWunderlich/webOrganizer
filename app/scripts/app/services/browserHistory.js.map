{"version":3,"sources":["../../../scripts.babel/app/services/browserHistory.js"],"names":[],"mappings":"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","file":"browserHistory.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc service\n * @name newTab.browserHistory\n * @description\n * Service for getting the Browser History\n */\n\nangular.module('newTab')\n  .factory('BrowserHistory', function ($log, $http, $q, configuration, ChromeApi) {\n\n    /**\n     * @ngdoc method\n     * @name getHistoryWithVisits\n     * @methodOf newTab.browserHistory\n     * @description Fetches the BrowserHistory and then adds to every PageInfo extra Data about the individual Visits\n     * @returns {promise}\n     */\n    var getHistoryWithVisits = function() {\n      var deferredHistory = $q.defer();\n      ChromeApi.getStorage('tabConnections')\n        .then(function(tabconnections) {\n          ChromeApi.getHistory().then(function(sites) {\n            var i = 0;\n            sites.reverse().forEach(function(site) {\n              ChromeApi.getVisits(site).then(function(visits){\n                //TODO: reduce amout of visitItems but (not with slice :-P)\n                //site.visits = visits.slice(0, configuration.getMaxVisits());\n                site.visits = visits;\n                site.visits.forEach(function(visit) {\n\n                  if(visit.referringVisitId === \"0\" && visit.transition === \"link\") {\n                    //TODO: find a way to set the still missing references (Find a PATTERN!)\n                    if(tabconnections[visit.visitId]) {\n                      //$log.debug('found tab reference:', tabconnections[visit.visitId]);\n                      //$log.debug('for', site.url);\n                      visit.referringVisitId = tabconnections[visit.visitId];\n                      site.refByNewTab = true;\n                    }\n                  }\n                  if(visit.transition === \"reload\") {\n                    site.reload = true;\n                    //TODO: find the orginal source of reloaded visits\n                  }\n                });\n              });\n              i++;\n              if(i===sites.length) {\n                deferredHistory.resolve(sites);\n              }\n            });\n          })\n        });\n      return deferredHistory.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name processVisit\n     * @methodOf newTab.browserHistory\n     * @description Connect the Data\n     * @returns {promise}\n     */\n    var getProcessedHistory = function() {\n\n      var deferred = $q.defer();\n\n      $q.all([\n        getHistoryWithVisits(),\n        ChromeApi.getBookmarks(),\n        ChromeApi.getOpenTabs(),\n        ChromeApi.getStorage()\n      ]).then(function(data) {\n\n        $log.debug('Starting to Process advanced PageHistory');\n\n        var history = data[0];\n        var bookmarks = data[1];\n        var tabs = data[2];\n        var configuration = data[3];\n\n        var domainIndex = 0;\n        var domainCollector = {};\n        var indexNeutralContext = 0;\n\n        // I: First Loop:\n        history.forEach(function(site) {\n\n          /**\n           * Collect Subset of URLs for linking Pages that have no referringVisitId\n           */\n          domainCollector[domainIndex] = site.url.substr(0, 20);\n          domainIndex++;\n          //$log.debug('DomainCollector',domainCollector);\n\n          // I.A  Set Bookmark & Context if found\n          chrome.bookmarks.search({url: site.url}, function(foundBookmark) {\n            //TODO (optional): length > 2 would mean Site is more than once bookmarked\n            if(foundBookmark.length > 0) {\n              site.context = foundBookmark[0]['parentId'];\n              site.bookmark = foundBookmark[0]['id'];\n              // more options are: alternative Title, Date added\n            }\n\n            // I.B Set Tabs if found\n            chrome.tabs.query({url: site.url}, function(foundTab) {\n              if(foundTab.length > 0) {\n                site.tab = foundTab[0];\n              }\n\n              //var found = _.where(history, { 'visits': { 'referringVisitId': site.visits[0]['visitId']}});\n              //$log.debug('search reference for', site.url);\n              site.visits.some(function(visit) {\n                return history.some(function(historyItem) {\n                  return historyItem.visits.some(function(historyVisitItem) {\n                    var _foundReference = (visit.referringVisitId === historyVisitItem.visitId && visit.id !== historyVisitItem.id);\n                    if (_foundReference) {\n                      site.FOUNDTHEREFERENCE = historyItem.url;\n                      //$log.debug('FOUND - Site', site);\n                      //$log.debug('FOUND - hi', historyItem);\n                      /**\n                       * Here happens some important magic:\n                       * if we find a link-reference to an existing page we lookup if the found page has already a context\n                       * if so we take this context for this site\n                       * if not we give them both a new context\n                       */\n                      if(historyItem.context) {\n                        if (site.context) {\n                          //TODO: If site.context exists what happens to this context?\n                        }\n                        site.context = historyItem.context;\n                      } else {\n                        if (site.context) {\n                           historyItem.context = site.context;\n                          //TODO: Check if this has any implications\n                        } else {\n                          historyItem.context = site.context = 'neutral-'+indexNeutralContext;\n                          indexNeutralContext++;\n                          //TODO: Check if this has any implications\n                        }\n                      }\n                    }\n                    return _foundReference;\n                  });\n                });\n              });\n\n\n              if(!site.context) {\n                //console.log(site.url);\n              }\n\n\n\n\n\n\n\n              // TODO: connect linked sites with visitItems\n              // TODO: connect linked sites with tabConnections\n              // Verknüpfung prüfen\n              //  - falls VID = 0 & transition link: Tabconnections ergänzen (verweis auf VisitID)\n              //  - Alle VisitItems in der History nach Ref durchsuchen\n              //  - Bei Treffer:\n              //      Szenario A: Fund hat keinen Kontext: Fund auch auf Kontext setzen\n              //      Szenario B: Fund hat Kontext: Kontext von Fund übernehmen (!! Prüfen ob 2. Kontext besteht - Wie ist mir noch unklar !!)\n              // Sichtbarkeit setzen (unwichtig/weiterleitung)\n              // Verschieben in Kontext\n              // Warnung bei Kontext hierarchie & doppeltbelegung\n\n\n              deferred.resolve(history.reverse());\n            });\n          });\n\n\n        });\n\n\n      });\n\n      // 2. Durchlauf (Iteration mit Tiefe n)\n      // Seiten ohne Kontext(geht das noch nach dem 1. Durchlauf)\n\n      // Prüfen ob Kontexte zusammenpassen\n      // Gleicher Ordner\n      // Zeitlicher Abstand ~vorsichtig genießen\n      // Vereinfachungen durch URL-Ähnlichkeit\n\n      // TODO: special filters for special sites\n      // Schnittstelle für Ausnahmeregelungen einplanen:\n      // Facebook, GMail, Google, Stackoverflow, GoogleDrive, Drupal, Wordpress etc.\n\n      // TODO: filter unwanted sites / urls\n\n      return deferred.promise;\n    };\n\n    return {\n      getHistoryWithVisits: getHistoryWithVisits,\n      getProcessedHistory: getProcessedHistory,\n      getBookmarks: ChromeApi.getBookmarks,\n      getOpenTabs: ChromeApi.getOpenTabs\n    };\n\n  });"]}